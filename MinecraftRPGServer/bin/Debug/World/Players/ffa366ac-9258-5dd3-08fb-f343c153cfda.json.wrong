{"exception":{"ClassName":"Newtonsoft.Json.JsonSerializationException","Message":"Error resolving type specified in JSON 'Inventory.Items.AmuletOfHealing, MinecraftRPGServer'. Path 'inventory.hotbar.$values[0].$type', line 56, position 72.","Data":null,"InnerException":{"ClassName":"Newtonsoft.Json.JsonSerializationException","Message":"Could not find type 'Inventory.Items.AmuletOfHealing' in assembly 'MinecraftRPGServer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.","Data":null,"InnerException":null,"HelpURL":null,"StackTraceString":"   в Newtonsoft.Json.Serialization.DefaultSerializationBinder.GetTypeFromTypeNameKey(StructMultiKey`2 typeNameKey)\r\n   в System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n   в Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(String assemblyName, String typeName)\r\n   в Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ResolveTypeName(JsonReader reader, Type& objectType, JsonContract& contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, String qualifiedTypeName)","RemoteStackTraceString":null,"RemoteStackIndex":0,"ExceptionMethod":"8\nGetTypeFromTypeNameKey\nNewtonsoft.Json, Version=13.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed\nNewtonsoft.Json.Serialization.DefaultSerializationBinder\nSystem.Type GetTypeFromTypeNameKey(Newtonsoft.Json.Utilities.StructMultiKey`2[System.String,System.String])","HResult":-2146233088,"Source":"Newtonsoft.Json","WatsonBuckets":null},"HelpURL":null,"StackTraceString":"   в Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ResolveTypeName(JsonReader reader, Type& objectType, JsonContract& contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, String qualifiedTypeName)\r\n   в Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadMetadataProperties(JsonReader reader, Type& objectType, JsonContract& contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue, Object& newValue, String& id)\r\n   в Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   в Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   в Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateList(IList list, JsonReader reader, JsonArrayContract contract, JsonProperty containerProperty, String id)\r\n   в Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateList(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, Object existingValue, String id)\r\n   в Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadMetadataProperties(JsonReader reader, Type& objectType, JsonContract& contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue, Object& newValue, String& id)\r\n   в Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   в Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   в Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, Object target)\r\n   в Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, String id)\r\n   в Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   в Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   в Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, Object target)\r\n   в Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, String id)\r\n   в Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   в Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   в Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(JsonReader reader, Type objectType, Boolean checkAdditionalContent)\r\n   в Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReader reader, Type objectType)\r\n   в Newtonsoft.Json.JsonConvert.DeserializeObject(String value, Type type, JsonSerializerSettings settings)\r\n   в Newtonsoft.Json.JsonConvert.DeserializeObject[T](String value, JsonSerializerSettings settings)\r\n   в PlayerData.Get(Guid uuid, String name, RPGServer server) в C:\\Users\\Lesoorub\\source\\repos\\MinecraftRPGServer\\MinecraftRPGServer\\core\\Entities\\Player\\PlayerData.cs:строка 60","RemoteStackTraceString":null,"RemoteStackIndex":0,"ExceptionMethod":"8\nResolveTypeName\nNewtonsoft.Json, Version=13.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed\nNewtonsoft.Json.Serialization.JsonSerializerInternalReader\nVoid ResolveTypeName(Newtonsoft.Json.JsonReader, System.Type ByRef, Newtonsoft.Json.Serialization.JsonContract ByRef, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty, System.String)","HResult":-2146233088,"Source":"Newtonsoft.Json","WatsonBuckets":null},"wrongJson":"{\r\n  \"$type\": \"PlayerData, MinecraftRPGServer\",\r\n  \"username\": \"XFGOISJDGO\",\r\n  \"loginname\": \"XFGOISJDGO\",\r\n  \"WorldName\": \"overworld\",\r\n  \"position\": {\r\n    \"$type\": \"v3f, MinecraftRPGServer\",\r\n    \"x\": 0.3943242,\r\n    \"y\": -43.0,\r\n    \"z\": 0.504038751\r\n  },\r\n  \"rotation\": {\r\n    \"$type\": \"v2f, MinecraftRPGServer\",\r\n    \"x\": -42.152462,\r\n    \"y\": 10.6923361\r\n  },\r\n  \"Health\": 92.6312561,\r\n  \"inventory\": {\r\n    \"$type\": \"Inventory.PressedInventory, MinecraftRPGServer\",\r\n    \"mainInv\": {\r\n      \"$type\": \"Inventory.Item[], MinecraftRPGServer\",\r\n      \"$values\": [\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null\r\n      ]\r\n    },\r\n    \"hotbar\": {\r\n      \"$type\": \"Inventory.Item[], MinecraftRPGServer\",\r\n      \"$values\": [\r\n        {\r\n          \"$type\": \"Inventory.Items.AmuletOfHealing, MinecraftRPGServer\",\r\n          \"rarity\": 5,\r\n          \"quality\": 4,\r\n          \"ItemID\": 872,\r\n          \"ItemCount\": 1\r\n        },\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null\r\n      ]\r\n    },\r\n    \"Armor\": {\r\n      \"$type\": \"Inventory.Item[], MinecraftRPGServer\",\r\n      \"$values\": [\r\n        null,\r\n        null,\r\n        null,\r\n        null\r\n      ]\r\n    },\r\n    \"Craft\": {\r\n      \"$type\": \"Inventory.Item[], MinecraftRPGServer\",\r\n      \"$values\": [\r\n        null,\r\n        null,\r\n        null,\r\n        null\r\n      ]\r\n    }\r\n  }\r\n}"}